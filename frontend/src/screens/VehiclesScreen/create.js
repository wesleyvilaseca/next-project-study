import Head from 'next/head';
import React, { useEffect } from 'react';
import Header from '../../layout/Header'
import { useRouter } from 'next/router'
import { changeLoading } from "../../store/actions/loading.action";
import { useSelector, useDispatch } from 'react-redux';
import { store, show, change, get_cep } from '../../store/actions/vehicles.action';
import MaskedInput from 'react-text-mask';
import { TextField, InputAdornment, CircularProgress, Select, MenuItem } from '@mui/material';

const TextMaskCustom = (props) => {
    const { inputRef, ...other } = props;
    const mask = [/[0-9]/, /\d/, /\d/, /\d/, /\d/, '-', /\d/, /\d/, /\d/];

    return (
        <MaskedInput
            {...other}
            ref={inputRef}
            mask={mask}
            guide={false}
        />
    )
}

export default function VehicleCreateScreen() {
    const router = useRouter();
    const dispatch = useDispatch();
    const data = useSelector(state => state.vehicleReducer);

    const [state, setState] = React.useState({
        isLoading: true,
        isLoadingCep: false,
        isDeleted: null,
        redirect: false,
        tips: 0,
        confirmEl: null,
        vehicle_id: null
    });

    if (state.isLoading) dispatch(changeLoading({ open: true }))

    useEffect(() => {
        if (!router.isReady) return;
        const id = router.query.id
        if (id) setState({ vehicle_id: id })

        index()

    }, [router.isReady])

    const index = () => {
        if (state.vehicle_id) {
            dispatch(show(state.vehicle_id))
                .then(res => {
                    setState({ isLoading: false })
                    dispatch(changeLoading({ open: false }))
                })
                .catch(error => {
                    console.log(error)
                    dispatch(changeLoading({ open: false }))
                })
        } else {
            dispatch(store())
                .then(res => {
                    setState({ isLoading: false })
                    dispatch(changeLoading({ open: false }))

                })
                .catch(error => {
                    console.log(error)
                    dispatch(changeLoading({ open: false }))
                })
        }
    }

    return (
        <React.Fragment>
            <Head>
                <title>Veiculos - Site CRM</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <Header title="Veículos gestão" />

            <div className='container mt-4 pt-3'>

                {(!state.isLoading) && (
                    <div className='row'>
                        <div className='col-md-7'>
                            <h3 className='font-weight-normal mb-4'> Localização do Veículo</h3>
                            <div className='card card-body'>
                                <div className='row'>
                                    <div className='col-md-7'>
                                        <TextField
                                            label="CEP"
                                            style={(state.isLoadingCep) ? { opacity: 0.5 } : {}}
                                            error={(data.error.zipCode) && true}
                                            type="tel"
                                            InputProps={{
                                                inputComponent: TextMaskCustom,
                                                value: data.vehicle.zipCode,
                                                onChange: text => {
                                                    dispatch(change({ zipCode: text.target.value }))
                                                    if (text.target.value.length > 8) {
                                                        setState({ isLoadingCep: true })
                                                        dispatch(get_cep(text.target.value))
                                                            .then(res => {
                                                                if (res) setState({ isLoadingCep: false })

                                                            })
                                                            .catch(error => {
                                                                setState({ isLoadingCep: false })
                                                            })

                                                        if (data.error.zipCode) {
                                                            delete data.error.zipCode;
                                                            delete data.error.uf;
                                                            delete data.error.city;
                                                        }
                                                    }
                                                },
                                                endAdornment: (
                                                    <InputAdornment position="start">
                                                        {(state.isLoadingCep) ?
                                                            <CircularProgress size={32} /> :
                                                            <></>
                                                        }
                                                    </InputAdornment>)
                                            }}
                                        />
                                        {(data.error.zipCode) &&
                                            <strong className='text-danger'>{data.error.zipCode[0]}</strong>
                                        }
                                    </div>
                                </div>

                                <div className='row mt-2'>
                                    <div className='col-md-9 form-group'>
                                        <TextField
                                            label="Cidade"
                                            error={(data.error.city) && true}
                                            disabled
                                            value={data.vehicle.city}
                                        />
                                        {(data.error.city) &&
                                            <strong className='text-danger'>{data.error.city[0]}</strong>
                                        }
                                    </div>
                                    <div className='col-md-3 form-group'>
                                        <TextField
                                            label="UF"
                                            error={(data.error.uf) && true}
                                            disabled
                                            value={data.vehicle.uf}
                                        />
                                        {(data.error.city) &&
                                            <strong className='text-danger'>{data.error.uf[0]}</strong>
                                        }
                                    </div>
                                </div>
                            </div>

                            <h3 className='font-weight-normal mt-4 mb-4'> Dados do Veiculo </h3>
                            <div className='card card-body'>
                                <div className='form-group'>
                                    <label className='label-custo'>Categoria</label>
                                    <Select
                                        label="Categoria"
                                        error={data.error.vehicle_type && true}
                                        value={data.vehicle.vehicle_type}
                                        onChange={event => {

                                        }}
                                        fullWidth
                                    >
                                        {data.types.map(item => (
                                            <MenuItem key={item.id} value={item.value}>{item.label}</MenuItem>
                                        ))}
                                    </Select>
                                </div>
                            </div>
                        </div>
                    </div>
                )}

                {(state.vehicle_id) ?
                    (<span>Veiculo edit {state.vehicle_id}</span>) :
                    (<span > Veiculo create</span>)
                }

            </div>
        </React.Fragment >
    )
}
